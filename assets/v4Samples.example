const Course = ({ pathname }) => {
  return (
    <div id="sidebar">
      <Match pattern="announcements" component={AnnouncementsSidebar} />
      <Match pattern="assignments" component={AssignmentsSidebar} />
    </div>
    <div id="main">
      <Match pattern="announcements" component={Announcements} />
      <Match pattern="assignments" component={Assignments} />
      <AuthorizedMatch pattern="grades" role="teacher" component={Grades} />
    </div>
  );
};

const AuthorizedMatch = ({ component:Component, role, ...rest }) => {
  return <Match {...rest} render={(props) => {
   if (!fakeAuth.isUserLoggedIn) {
      return <Redirect to={{ path="/login", query: { from: props.pathname } }} />;
    }
    if (fakeAuth.user.roles.contains(role)) {
      return <h2>User unauthorized</h2>;
    }
    return <Component {...props} />;
  }} />
};

const Announcements = ({ announcements, pathname }) => {
  return (
    <ul>
      {announcements.map(item => (<li>
        <p>{item}</p>
        <Match pattern={`${item.key}/reply`}>
          {({matched, ...props}) => {
            if (!matched) {
              return (<Link to='reply'>
                <Button>Reply</button>
              </Link>);
            }
            return (<div>
              <TextArea />
              <Link
                to={pathname}
                onClick={handleReply}
              >
                Submit
              </Link>
            </div>);
          }}
        </Match>
      </li>))}
    </ul>
  );
};

const routes = [
  { pattern: '/sandwiches',
    component: Sandwiches,
  },
  { pattern: '/tacos',
    component: Tacos,
    routes: [
      { pattern: '/tacos/bus',
        component: Bus
      },
      { pattern: '/tacos/cart',
        component: Cart,
      },
    ],
  },
];

// wrap `Match` and use this everywhere instead, then when
// sub routes are added to any route it'll work
const MatchWithSubRoutes = (route) => (
  <Match {...route} render={(props) => (
    // pass the sub-routes down to keep nesting
    <route.component {...props} routes={route.routes}/>
  )}/>
);